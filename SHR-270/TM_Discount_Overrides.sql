DROP TABLE KSF_DATAANALYTICS_DEV.DS_SHRINK.OVERRIDE_STR_RBU;
CREATE TABLE KSF_DATAANALYTICS_DEV.DS_SHRINK.OVERRIDE_STR_RBU AS
SELECT A.EMPLOYEE_CUST_NUMBER, A.OVERRIDE_REASON, A.RBU_DESCRIPTION,
A.M_STORE, A.D_TRN_DATE,
--A.M_STORE, A.D_TRN_DATE,
COUNT(DISTINCT A.M_TRN_ID) AS TOTAL_TRAN,
SUM(A.UNITS_SOLD) AS UNITS_SOLD, 
SUM(ORIGINAL_AMT) AS ORIGINAL_AMT,
SUM(ORIGINAL_COST_AMT) AS ORIGINAL_COST_AMT,
SUM(OVERRIDE_AMT_WITHOUT_DISC) AS OVERRIDE_AMT_WITHOUT_DISC,
SUM(DIFF_PRICE_WITHOUT_DISC) AS DIFF_PRICE_WITHOUT_DISC,
SUM(OVERRIDE_AMT_WITH_DISC) AS OVERRIDE_AMT_WITH_DISC,
SUM(DIFF_PRICE_WITH_DISC) AS DIFF_PRICE_WITH_DISC
FROM
(SELECT A.M_TRN_ID, A.M_KD, A.M_STORE, A.D_TRN_DATE, A.KEYCODE_STATUS, A.M_OPERATOR,
--A.LOCATION_REGULAR_SELL_PR_AMT, A.NATIONAL_REGULAR_SELL_PR_AMT, A.AUS_NATIONAL_REGULAR_SELL_AMT,
A.DEPARTMENT_DESCRIPTION, A.RBU_DESCRIPTION,
A.ORIGINAL_UNIT_REG_PRICE, A.UNITS_SOLD, 
(A.ORIGINAL_UNIT_REG_PRICE*A.UNITS_SOLD) AS ORIGINAL_AMT, --(A.ORIGINAL_UNIT_REG_PRICE*A.UNITS_SOLD)/(1 + A.MAX_GSTRATE/100) AS ORIGINAL_AMT,
(A.UNIT_COST_PRICE*A.UNITS_SOLD) AS ORIGINAL_COST_AMT,
(A.SUM_PR - A.MAX_A_EXT_DISC - (A.MAX_PR*A.MAX_P_DISC/100)) AS OVERRIDE_AMT_WITHOUT_DISC, --(A.MAX_PR - A.MAX_A_EXT_DISC - (A.MAX_PR*A.MAX_P_DISC/100))/(1 + A.MAX_GSTRATE/100) AS OVERRIDE_AMT,
A.SUM_PR AS OVERRIDE_AMT_WITH_DISC,
(A.SUM_PR/A.UNITS_SOLD) AS OVERRIDE_UNIT_PRICE_WITH_DISC,
(ORIGINAL_AMT - OVERRIDE_AMT_WITHOUT_DISC) AS DIFF_PRICE_WITHOUT_DISC,
(ORIGINAL_AMT - OVERRIDE_AMT_WITH_DISC) AS DIFF_PRICE_WITH_DISC,
CASE 
WHEN PRICEOVERRIDEREASONCODE = 0 THEN 'STORE USE ITEMS'
WHEN PRICEOVERRIDEREASONCODE = 1 THEN 'S&D MARKDOWN'
WHEN PRICEOVERRIDEREASONCODE = 2 THEN 'TEAM CLOTHING'
WHEN PRICEOVERRIDEREASONCODE = 3 THEN 'LAST 3 PROCESS'
WHEN PRICEOVERRIDEREASONCODE = 4 THEN 'COMP/PRICE GUARANTEE'
WHEN PRICEOVERRIDEREASONCODE = 5 THEN 'AD ITEM/SUBST/RCHECK'
WHEN PRICEOVERRIDEREASONCODE = 6 THEN 'PRICE/SCAN ERROR'
WHEN PRICEOVERRIDEREASONCODE = 7 THEN 'REF/EX VOUCH PRICE DIFF'
WHEN PRICEOVERRIDEREASONCODE = 8 THEN 'BONUS ITEM/GIFTWP'
WHEN PRICEOVERRIDEREASONCODE = 9 THEN 'PERCENTAGE OFF'
WHEN PRICEOVERRIDEREASONCODE = 10 THEN 'NATIONAL OFFICE PURCH'
ELSE 'UNIDENTIFIED' END AS OVERRIDE_REASON,
CASE 
WHEN OVERRIDE_UNIT_PRICE_WITH_DISC <= 1 THEN '0-1'
WHEN OVERRIDE_UNIT_PRICE_WITH_DISC <= 2 THEN '1-2'
WHEN OVERRIDE_UNIT_PRICE_WITH_DISC <= 5 THEN '2-5'
WHEN OVERRIDE_UNIT_PRICE_WITH_DISC <= 10 THEN '5-10'
WHEN OVERRIDE_UNIT_PRICE_WITH_DISC > 10 THEN '>10'
ELSE 'NULL' END AS OVERRIDE_UNIT_PR_WINDOW,
C.M_CUST_NUMBER AS FLYBUY_CUST_NUMBER,
D.M_CUST_NUMBER AS EMPLOYEE_CUST_NUMBER
FROM
(SELECT A.M_TRN_ID, A.M_KD, A.M_STORE, A.D_TRN_DATE, A.M_OPERATOR,
A.LOCATION_REGULAR_SELL_PR_AMT, A.NATIONAL_REGULAR_SELL_PR_AMT, 
A.AUS_NATIONAL_REGULAR_SELL_AMT, A.ORIGINAL_UNIT_REG_PRICE,
A.UNIT_COST_PRICE, A.KEYCODE_STATUS,
A.DEPARTMENT_DESCRIPTION, A.RBU_DESCRIPTION,
MAX(PRICEOVERRIDEREASONCODE) AS PRICEOVERRIDEREASONCODE,
MAX(A_UNIT_PR)*SUM(Q_UNITS) AS MAX_PR, SUM(A_EXT_PR) AS SUM_PR, 
SUM(Q_UNITS) AS UNITS_SOLD,
MAX(A_GSTRATE) AS MAX_GSTRATE,
MAX(P_DISC) AS MAX_P_DISC, MAX(A_EXT_DISC) AS MAX_A_EXT_DISC
FROM
(SELECT TRN_DET.M_TRN_ID, TRN_DET.M_KD, TRN_DET.M_STORE, TRN_DET.D_TRN_DATE, TRN_HEAD.M_OPERATOR,
PLP.LOCATION_REGULAR_SELL_PR_AMT, PCP.NATIONAL_REGULAR_SELL_PR_AMT, KC.AUS_NATIONAL_REGULAR_SELL_AMT,
KC.DEPARTMENT_DESCRIPTION, KC.RBU_DESCRIPTION,
COALESCE(PLP.LOCATION_REGULAR_SELL_PR_AMT,PCP.NATIONAL_REGULAR_SELL_PR_AMT,KC.AUS_NATIONAL_REGULAR_SELL_AMT) AS ORIGINAL_UNIT_REG_PRICE,
COALESCE(AWC.LOCATION_AWC_AMOUNT, AWC_LATEST.LOCATION_AWC_AMOUNT, KC.AUS_NATIONAL_REGULAR_SELL_AMT) AS UNIT_COST_PRICE,
CASE WHEN PLS.STATUS_CODE IS NOT NULL THEN PLS.STATUS_CODE
WHEN LOC.COUNTRY_CODE IN ('AUS') THEN AUS_KEYCODE_STATUS_CODE 
ELSE NZ_KEYCODE_STATUS_CODE END AS KEYCODE_STATUS, TRN_DET.PRICEOVERRIDEREASONCODE,
TRN_DET.A_EXT_PR, TRN_DET.Q_UNITS, TRN_DET.A_GSTRATE,
TRN_DET.P_DISC, TRN_DET.A_EXT_DISC, TRN_DET.A_UNIT_PR
FROM KSFPA.IPS_SALES.TRN_DETAIL TRN_DET
INNER JOIN KSFPA.MR2C.KEYCODE KC
ON TRN_DET.M_KD = KC.PRODUCT_SOURCE_IDENTIFIER
INNER JOIN KSFPA.MR2C.LOCATION LOC
ON TRN_DET.M_STORE = LOC.LOCATION_SOURCE_IDENTIFIER
LEFT JOIN KSFPA.MR2.PRODUCT_LOCATION_PROFILE PLP
ON PLP.PRODUCT_GENERATED_IDENTIFIER = KC.PRODUCT_GENERATED_IDENTIFIER
AND PLP.LOCATION_GENERATED_IDENTIFIER = LOC.LOCATION_GENERATED_IDENTIFIER
AND PLP.EXPIRY_DATE >= '2022-06-01'
AND TRN_DET.D_TRN_DATE >= PLP.EFFECTIVE_DATE
AND TRN_DET.D_TRN_DATE <= PLP.EXPIRY_DATE
LEFT JOIN KSFPA.MR2.PRODUCT_COUNTRY_PROFILE PCP
ON PCP.PRODUCT_GENERATED_IDENTIFIER = KC.PRODUCT_GENERATED_IDENTIFIER
AND PCP.COUNTRY_CODE = LOC.COUNTRY_CODE
AND PCP.EXPIRY_DATE >= '2022-06-01'
AND TRN_DET.D_TRN_DATE >= PCP.EFFECTIVE_DATE
AND TRN_DET.D_TRN_DATE <= PCP.EXPIRY_DATE
LEFT JOIN KSFPA.MR2.PRODUCT_LOCATION_STATUS PLS
ON PLS.PRODUCT_GENERATED_IDENTIFIER = KC.PRODUCT_GENERATED_IDENTIFIER
AND PLS.LOCATION_GENERATED_IDENTIFIER = LOC.CLIMATIC_REGION_GENERATED_ID
AND PLS.EXPIRY_DATE >= '2022-06-01'
AND TRN_DET.D_TRN_DATE >= PLS.EFFECTIVE_DATE
AND TRN_DET.D_TRN_DATE <= PLS.EXPIRY_DATE
LEFT JOIN KSFPA.MR2.SS_AVERAGE_WEIGHTED_COST AWC
ON AWC.PRODUCT_GENERATED_IDENTIFIER = KC.PRODUCT_GENERATED_IDENTIFIER
AND AWC.LOCATION_GENERATED_IDENTIFIER = LOC.LOCATION_GENERATED_IDENTIFIER
AND AWC.EXPIRY_DATE >= '2022-06-01'
AND TRN_DET.D_TRN_DATE >= AWC.EFFECTIVE_DATE
AND TRN_DET.D_TRN_DATE <= AWC.EXPIRY_DATE
LEFT JOIN (SELECT PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER, LOCATION_AWC_AMOUNT
	FROM KSFPA.MR2.SS_AVERAGE_WEIGHTED_COST
	WHERE EXPIRY_DATE >= '2022-06-01'
	QUALIFY RANK() OVER(PARTITION BY PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER ORDER BY EFFECTIVE_DATE) = 1
) AWC_LATEST
ON AWC_LATEST.PRODUCT_GENERATED_IDENTIFIER = KC.PRODUCT_GENERATED_IDENTIFIER
AND AWC_LATEST.LOCATION_GENERATED_IDENTIFIER = LOC.LOCATION_GENERATED_IDENTIFIER
LEFT JOIN KSFPA.IPS_SALES.TRN_HEADER TRN_HEAD
ON TRN_DET.M_TRN_ID = TRN_HEAD.M_TRN_ID
AND TRN_DET.M_STORE = TRN_HEAD.M_STORE
AND TRN_DET.D_TRN_DATE = TRN_HEAD.D_TRN_DATE
--WHERE LOC.LOCATION_SOURCE_IDENTIFIER = 1097//3350//1125
--AND KC.PRODUCT_SOURCE_IDENTIFIER = 43239702//71922638//42738725
WHERE TRN_DET.D_TRN_DATE >= '2022-06-01'
AND TRN_DET.D_TRN_DATE < '2023-05-31'
AND F_VOIDED = 0
AND F_SUSPENDED = 0
AND F1_GIFTVOUCHERITEM = 0
AND F1_GIFTCARDITEM = 0) A
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13) A
LEFT JOIN 
(SELECT * FROM KSFPA.IPS_SALES.TRN_CUST
WHERE M_CUST_TYPE = 3) C
ON A.M_TRN_ID = C.M_TRN_ID 
AND A.M_STORE = C.M_STORE 
AND A.D_TRN_DATE = C.D_TRN_DATE
LEFT JOIN
(SELECT * FROM KSFPA.IPS_SALES.TRN_CUST
WHERE M_CUST_TYPE = 2) D
ON A.M_TRN_ID = D.M_TRN_ID 
AND A.M_STORE = D.M_STORE 
AND A.D_TRN_DATE = D.D_TRN_DATE
WHERE A.MAX_PR > A.SUM_PR
AND A.UNITS_SOLD > 0) A
--GROUP BY 1,2,3,4,5,6,7,8,9;
GROUP BY 1,2,3,4,5;


SELECT EMPLOYEE_CUST_NUMBER,
RBU_DESCRIPTION,
OVERRIDE_REASON,
--SUM(DIFF_PRICE_WITHOUT_DISC) AS NET_OVERRIDE_PRICE_DIFF_WITHOUT_DISC,
SUM(UNITS_SOLD) AS NET_UNITS_SOLD,
SUM(ORIGINAL_AMT) AS NET_ORIGINAL_AMT,
SUM(ORIGINAL_COST_AMT) AS NET_ORIGINAL_COST_AMT,
SUM(ORIGINAL_AMT-ORIGINAL_COST_AMT) AS NET_MARGIN_AMT,
--SUM(OVERRIDE_AMT_WITHOUT_DISC) AS OVERRIDE_AMT_WITHOUT_DISC,
SUM(OVERRIDE_AMT_WITH_DISC) AS NET_OVERRIDE_AMT_WITH_DISC,
SUM(DIFF_PRICE_WITH_DISC) AS NET_OVERRIDE_PRICE_DIFF,
SUM(TOTAL_TRAN) AS NET_TOTAL_TRAN
FROM KSF_DATAANALYTICS_DEV.DS_SHRINK.OVERRIDE_STR_RBU
WHERE OVERRIDE_REASON IN ('TEAM CLOTHING')
AND EMPLOYEE_CUST_NUMBER IS NOT NULL
GROUP BY 1,2,3;