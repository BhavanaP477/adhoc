==========================================================================================================================
DUPLICATE RECEIPTS:

create or replace view KSF_DATAANALYTICS_DEV.DS_SHRINK.DUPLICATED_RECEIPT_IPS(
  LOCATION_GENERATED_IDENTIFIER,
  DAY_DATE,
  PRODUCT_GENERATED_IDENTIFIER,
  STOCK_MOVEMENT_REFERENCE_ID,
  TOTAL_QTY_ADJ,
  MAX_QTY_ADJ,
  NUMBER_OF_ADJ
) as
select LOCATION_GENERATED_IDENTIFIER, DAY_DATE, PRODUCT_GENERATED_IDENTIFIER, STOCK_MOVEMENT_REFERENCE_ID, 
sum(STOCK_MOVEMENT_QUANTITY) as total_qty_adj,
max(STOCK_MOVEMENT_QUANTITY) as max_qty_adj,
count(*) as number_of_adj
from KSFPA.IPS_STOCK_AUDIT.IPS_STOCK_AUDIT
WHERE 
  (STOCK_MOVEMENT_CATEGORY = 'SRSD'
  OR STOCK_MOVEMENT_SOURCE = 'ERD_SRS')
and DAY_DATE >= '2023-02-01'
group by LOCATION_GENERATED_IDENTIFIER, DAY_DATE, PRODUCT_GENERATED_IDENTIFIER, STOCK_MOVEMENT_REFERENCE_ID
having number_of_adj > 1
and total_qty_adj <> max_qty_adj
and (total_qty_adj/number_of_adj) = max_qty_adj;

----------------------------------------------------------------------------------------------------------------------------
WITH T1 AS (
SELECT DISTINCT LOCATION_AWC_AMOUNT,substring(PRODUCT_GENERATED_IDENTIFIER,1,8)AS KEYCODE,substring(LOCATION_GENERATED_IDENTIFIER, 5, 4) AS LOCATION_ID FROM KSFPA.MR2.SS_AVERAGE_WEIGHTED_COST WHERE EXPIRY_DATE ='9999-12-31' 
)
SELECT *, LOCATION_AWC_AMOUNT*(TOTAL_QTY_ADJ - MAX_QTY_ADJ) AS TOTAL_AWC_AMOUNT FROM (
SELECT * FROM  KSF_DATAANALYTICS_DEV.DS_SHRINK.DUPLICATED_RECEIPT_IPS
) B
LEFT JOIN T1 S ON B.PRODUCT_GENERATED_IDENTIFIER = S.KEYCODE AND B.LOCATION_GENERATED_IDENTIFIER = S.LOCATION_ID 


=============================================================================================================================
DUPLICATE STOCK ADJUSTMENTS SHRINK:

create or replace view KSF_DATAANALYTICS_DEV.DS_SHRINK.DUPLICATED_STK_ADJ(
  KEYCODE,
  PRODUCT_DESCRIPTION,
  DEPARTMENT_DESCRIPTION,
  STORE,
  LOCATION_NAME,
  STATE,
  DC_GROUP_ABBREV_NAME,
  TRANSACTION_USER_ID,
  DAY_DATE,
  STOCK_MOVEMENT_CODE,
  STOCK_MOVEMENT_QUANTITY,
  FREQUENCY,
  TOTAL_STOCK_MOVEMENT_QUANTITY,
  MAX_STOCK_MOVEMENT_QUANTITY 
) as
select B.PRODUCT_SOURCE_IDENTIFIER as KEYCODE
,B.PRODUCT_DESCRIPTION, B.DEPARTMENT_DESCRIPTION
,C.LOCATION_SOURCE_IDENTIFIER as STORE
,C.LOCATION_NAME, C.STATE, C.DC_GROUP_ABBREV_NAME
,a.TRANSACTION_USER_ID, a.DAY_DATE
,a.STOCK_MOVEMENT_CODE, a.STOCK_MOVEMENT_QUANTITY
,count(*) as FREQUENCY
,sum(a.STOCK_MOVEMENT_QUANTITY) as TOTAL_STOCK_MOVEMENT_QUANTITY
,MAX(STOCK_MOVEMENT_QUANTITY) as MAX_STOCK_MOVEMENT_QUANTITY
from KSFPA.IPS_STOCK_AUDIT.IPS_STOCK_AUDIT A
inner join KSFPA.MR2C.KEYCODE B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_SOURCE_IDENTIFIER
inner join KSFPA.MR2C.LOCATION C
on A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_SOURCE_IDENTIFIER
WHERE ((STOCK_MOVEMENT_SOURCE = 'Shrinkage' AND  STOCK_MOVEMENT_CODE IS NULL) OR STOCK_MOVEMENT_CODE IN ('00','0','02','2','03','3','04','4','5','05','7','07','08','8','11','17','20','21','29','34','35','36','37','50','51','53','54','55','56','57','58','60','61','62','63','64','65','66','67','68','69','70','NS','NP'))
AND DAY_DATE > '2023-02-19' 
and A.STOCK_MOVEMENT_QUANTITY <> 0
group by 1,2,3,4,5,6,7,8,9,10,11
having FREQUENCY >1
AND TOTAL_STOCK_MOVEMENT_QUANTITY <> MAX_STOCK_MOVEMENT_QUANTITY;

---------------------------------------------------------------------------------------------------
dollar value 

WITH T1 AS (
SELECT DISTINCT LOCATION_AWC_AMOUNT,substring(PRODUCT_GENERATED_IDENTIFIER,1,8)AS KEYCODE,substring(LOCATION_GENERATED_IDENTIFIER, 5, 4) AS LOCATION_ID FROM KSFPA.MR2.SS_AVERAGE_WEIGHTED_COST WHERE EXPIRY_DATE ='9999-12-31' 
)
SELECT *
,CASE WHEN NEGATIVE_STOCK_MOVEMENT_QUANTITY IS NOT NULL THEN LOCATION_AWC_AMOUNT *(TOTAL_STOCK_MOVEMENT_QUANTITY- NEGATIVE_STOCK_MOVEMENT_QUANTITY) END AS NEGATIVE_TOTAL_AWC
,CASE WHEN POSITIVE_STOCK_MOVEMENT_QUANTITY IS NOT NULL THEN LOCATION_AWC_AMOUNT *(TOTAL_STOCK_MOVEMENT_QUANTITY- POSITIVE_STOCK_MOVEMENT_QUANTITY) END AS POSITIVE_TOTAL_AWC
FROM(
SELECT *
, CASE WHEN STOCK_MOVEMENT_QUANTITY < 0 THEN STOCK_MOVEMENT_QUANTITY END  AS NEGATIVE_STOCK_MOVEMENT_QUANTITY 
, CASE WHEN STOCK_MOVEMENT_QUANTITY >0  THEN STOCK_MOVEMENT_QUANTITY END AS POSITIVE_STOCK_MOVEMENT_QUANTITY
FROM(
SELECT * FROM KSF_DATAANALYTICS_DEV.DS_SHRINK.DUPLICATED_STK_ADJ
)) B
LEFT OUTER JOIN T1 S ON B.KEYCODE = S.KEYCODE AND B.STORE = S.LOCATION_ID 
