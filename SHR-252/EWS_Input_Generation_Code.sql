
---------------------------Preparing Training data--------------------------------------
---------------------- Get all code 4 adjustment dates of all stores ---------------
DROP TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE AS 
SELECT A.LOCATION_GENERATED_IDENTIFIER, B.LOCATION_SOURCE_IDENTIFIER, 
CASE WHEN A.START_DATE_ADJ_TYPE IN ('FIRST_ADJ') THEN LEAST(A.START_DATE,C.FIRST_SLS_DATE) 
ELSE DATEADD(DAY,14,A.START_DATE) END AS START_DATE,
DATEADD(DAY,7,A.END_DATE) AS END_DATE,
A.START_DATE AS ADJ_START_DATE, C.FIRST_SLS_DATE,
A.START_DATE_ADJ_TYPE, A.END_DATE AS ADJ_END_DATE, A.END_DATE_ADJ_TYPE
FROM
(select LOCATION_GENERATED_IDENTIFIER, PERIOD_END_DATE as START_DATE, ADJ_TYPE as START_DATE_ADJ_TYPE,
LAG(PERIOD_END_DATE,1) OVER (PARTITION BY LOCATION_GENERATED_IDENTIFIER ORDER BY PERIOD_END_DATE DESC) AS END_DATE,
LAG(ADJ_TYPE,1) OVER (PARTITION BY LOCATION_GENERATED_IDENTIFIER ORDER BY PERIOD_END_DATE DESC) AS END_DATE_ADJ_TYPE
FROM
(select LOCATION_GENERATED_IDENTIFIER, PERIOD_END_DATE, ADJ_TYPE
FROM
(select distinct A.LOCATION_GENERATED_IDENTIFIER, A.PERIOD_END_DATE, 
'STK_ADJ' AS ADJ_TYPE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join KSFPA.MR2C.KEYCODE K
on A.PRODUCT_GENERATED_IDENTIFIER = K.PRODUCT_GENERATED_IDENTIFIER
where STOCK_ADJUSTMENT_REASON_CODE IN ('04')
AND K.DEPARTMENT_DESCRIPTION NOT IN ('GARDEN GREENS','MAGAZINES','REUSABLE BAGS','CARDS & WRAP','PHOTO CENTRE','GIFT CARDS & RCHRG'))
UNION
(SELECT LOCATION_GENERATED_IDENTIFIER, MIN(PERIOD_END_DATE) AS PERIOD_END_DATE,
'FIRST_ADJ' AS ADJ_TYPE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT
GROUP BY 1)
order by LOCATION_GENERATED_IDENTIFIER ASC, PERIOD_END_DATE DESC)) A

INNER JOIN KSFPA.MR2C.LOCATION B
ON A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER

LEFT JOIN
(select LOCATION_GENERATED_IDENTIFIER, MIN(WEEK_END_DATE) AS FIRST_SLS_DATE
FROM KSFPA.MR2C.WEEKLY_ADJUSTED_SALES
WHERE WEEKLY_NET_SELL_AMOUNT > 0
GROUP BY 1) C
ON A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_GENERATED_IDENTIFIER

JOIN (SELECT DATEADD(DAY,28,MIN(PERIOD_END_DATE)) AS MIN_DATE FROM KSFPA.MR2.SS_STOCK_ADJUSTMENT) D
ON 1=1

--LEFT JOIN
--(select A.STORE_NO, A.OPEN_DATE, B.MIN_DATE
--from KSFPA.IPS_SALES.KMART_STORE_LOCATION_PROFILE A
--JOIN (SELECT MIN(PERIOD_END_DATE) AS MIN_DATE FROM KSFPA.MR2.SS_STOCK_ADJUSTMENT) B
--ON 1=1
--WHERE A.OPEN_DATE > B.MIN_DATE) C
--ON B.LOCATION_SOURCE_IDENTIFIER = C.STORE_NO

WHERE A.END_DATE IS NOT NULL
AND NOT (A.START_DATE_ADJ_TYPE IN ('FIRST_ADJ') AND A.START_DATE < D.MIN_DATE);
--AND NOT (A.START_DATE_ADJ_TYPE IN ('FIRST_ADJ') AND C.OPEN_DATE IS NULL)
--AND IFNULL(C.OPEN_DATE,'1900-01-01') < A.START_DATE


------------------------------------------------------------------------------------------------
DROP TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS AS
SELECT A.PRODUCT_GENERATED_IDENTIFIER, C.PRODUCT_SOURCE_IDENTIFIER,
C.PRODUCT_DESCRIPTION, C.DEPARTMENT_SOURCE_IDENTIFIER, C.DEPARTMENT_DESCRIPTION, 
C.RBU_DESCRIPTION, C.BRAND_DESCRIPTION, C.HOUSEBRAND_NAME, 
C.BRAND_LABEL_DESCRIPTION, kc_flexi.BRAND_LABEL_TYPE,
kc_flexi.BRAND_LABEL, C.PREFERRED_SUPPLIER_NAME, 
C.LOCAL_OVERSEAS_INDICATOR, A.LOCATION_GENERATED_IDENTIFIER, 
B.LOCATION_SOURCE_IDENTIFIER, B.LOCATION_NAME, 
B.LOCATION_TYPE_CODE, B.DC_GROUP_ABBREV_NAME,
A.ADJ_START_DATE, A.START_DATE, A.START_DATE_ADJ_TYPE, 
A.ADJ_END_DATE, A.END_DATE, A.END_DATE_ADJ_TYPE,
SS_STK_ADJ.net_adj_qty, SS_STK_ADJ.net_adj_amt,
SALES.net_sls_qty, SALES.net_sls_amt,
SS_STK_ADJ.net_neg_adj_qty, SS_STK_ADJ.net_pos_adj_qty,
SS_STK_ADJ.net_neg_adj_amt, SS_STK_ADJ.net_pos_adj_amt,
SS_STK_ADJ.unknown_shrink_qty, SS_STK_ADJ.known_shrink_qty,
SS_STK_ADJ.unknown_shrink_amt, SS_STK_ADJ.known_shrink_amt,

SS_STK_ADJ.code3_neg_adj_qty, SS_STK_ADJ.code4_neg_adj_qty, SS_STK_ADJ.code5_neg_adj_qty, 
SS_STK_ADJ.code6_neg_adj_qty, SS_STK_ADJ.code11_neg_adj_qty, SS_STK_ADJ.code17_neg_adj_qty, 
SS_STK_ADJ.code20_neg_adj_qty, SS_STK_ADJ.code34_neg_adj_qty, SS_STK_ADJ.code35_neg_adj_qty, 
SS_STK_ADJ.code36_neg_adj_qty, SS_STK_ADJ.code37_neg_adj_qty, SS_STK_ADJ.code60_neg_adj_qty,
SS_STK_ADJ.code62_neg_adj_qty, SS_STK_ADJ.code66_neg_adj_qty, SS_STK_ADJ.code67_neg_adj_qty,
SS_STK_ADJ.code68_neg_adj_qty, SS_STK_ADJ.code69_neg_adj_qty, SS_STK_ADJ.code70_neg_adj_qty, 
SS_STK_ADJ.codeNP_neg_adj_qty,
SS_STK_ADJ.code3_pos_adj_qty, SS_STK_ADJ.code4_pos_adj_qty, SS_STK_ADJ.code5_pos_adj_qty, 
SS_STK_ADJ.code6_pos_adj_qty, SS_STK_ADJ.code11_pos_adj_qty, SS_STK_ADJ.code17_pos_adj_qty, 
SS_STK_ADJ.code20_pos_adj_qty, SS_STK_ADJ.code34_pos_adj_qty, SS_STK_ADJ.code35_pos_adj_qty, 
SS_STK_ADJ.code36_pos_adj_qty, SS_STK_ADJ.code37_pos_adj_qty, SS_STK_ADJ.code60_pos_adj_qty,
SS_STK_ADJ.code62_pos_adj_qty, SS_STK_ADJ.code66_pos_adj_qty, SS_STK_ADJ.code67_pos_adj_qty,
SS_STK_ADJ.code68_pos_adj_qty, SS_STK_ADJ.code69_pos_adj_qty, SS_STK_ADJ.code70_pos_adj_qty, 
SS_STK_ADJ.codeNP_pos_adj_qty,

SS_STK_ADJ.code3_neg_adj_amt, SS_STK_ADJ.code4_neg_adj_amt, SS_STK_ADJ.code5_neg_adj_amt, 
SS_STK_ADJ.code6_neg_adj_amt, SS_STK_ADJ.code11_neg_adj_amt, SS_STK_ADJ.code17_neg_adj_amt, 
SS_STK_ADJ.code20_neg_adj_amt, SS_STK_ADJ.code34_neg_adj_amt, SS_STK_ADJ.code35_neg_adj_amt, 
SS_STK_ADJ.code36_neg_adj_amt, SS_STK_ADJ.code37_neg_adj_amt, SS_STK_ADJ.code60_neg_adj_amt,
SS_STK_ADJ.code62_neg_adj_amt, SS_STK_ADJ.code66_neg_adj_amt, SS_STK_ADJ.code67_neg_adj_amt,
SS_STK_ADJ.code68_neg_adj_amt, SS_STK_ADJ.code69_neg_adj_amt, SS_STK_ADJ.code70_neg_adj_amt, 
SS_STK_ADJ.codeNP_neg_adj_amt,
SS_STK_ADJ.code3_pos_adj_amt, SS_STK_ADJ.code4_pos_adj_amt, SS_STK_ADJ.code5_pos_adj_amt, 
SS_STK_ADJ.code6_pos_adj_amt, SS_STK_ADJ.code11_pos_adj_amt, SS_STK_ADJ.code17_pos_adj_amt, 
SS_STK_ADJ.code20_pos_adj_amt, SS_STK_ADJ.code34_pos_adj_amt, SS_STK_ADJ.code35_pos_adj_amt, 
SS_STK_ADJ.code36_pos_adj_amt, SS_STK_ADJ.code37_pos_adj_amt, SS_STK_ADJ.code60_pos_adj_amt,
SS_STK_ADJ.code62_pos_adj_amt, SS_STK_ADJ.code66_pos_adj_amt, SS_STK_ADJ.code67_pos_adj_amt,
SS_STK_ADJ.code68_pos_adj_amt, SS_STK_ADJ.code69_pos_adj_amt, SS_STK_ADJ.code70_pos_adj_amt, 
SS_STK_ADJ.codeNP_pos_adj_amt


from
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER,
ADJ_START_DATE, START_DATE, START_DATE_ADJ_TYPE, 
ADJ_END_DATE, END_DATE, END_DATE_ADJ_TYPE
from
(select distinct A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.ADJ_START_DATE, B.START_DATE, B.START_DATE_ADJ_TYPE, 
B.ADJ_END_DATE, B.END_DATE, B.END_DATE_ADJ_TYPE
from KSFPA.MR2C.WEEKLY_ADJUSTED_SALES A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE >= B.START_DATE
and A.WEEK_END_DATE <= B.END_DATE
--and B.LAST_LAST_STK_DATE is NOT NULL
and A.WEEKLY_NET_SELL_AMOUNT != 0) 
UNION 
(select distinct A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.ADJ_START_DATE, B.START_DATE, B.START_DATE_ADJ_TYPE, 
B.ADJ_END_DATE, B.END_DATE, B.END_DATE_ADJ_TYPE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.PERIOD_END_DATE >= B.START_DATE
and A.PERIOD_END_DATE <= B.END_DATE
--and B.LAST_LAST_STK_DATE is NOT NULL
and A.STOCK_ADJUSTMENT_COST_AMOUNT != 0
and A.STOCK_ADJUSTMENT_REASON_CODE IN ('00', '02', '03', '04', '05', '06', '07', '08', '11', '17', '20', '21', '29', '34', '35', '36', '37', '50', '51', '53', '54', '55', '56', '57', '58', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', 'NS', 'NP')) ) A

inner join KSFPA.MR2C.LOCATION B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER

inner join KSFPA.MR2C.KEYCODE as C
on A.PRODUCT_GENERATED_IDENTIFIER = C.PRODUCT_GENERATED_IDENTIFIER

left join KSFPA.MR2C.KEYCODE_FLEXIBLE_ATTRIBUTE as kc_flexi
on A.PRODUCT_GENERATED_IDENTIFIER = kc_flexi.PRODUCT_GENERATED_IDENTIFIER

left join
(select A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.START_DATE, B.END_DATE,
sum(A.STOCK_ADJUSTMENT_QUANTITY) as net_adj_qty,
sum(A.STOCK_ADJUSTMENT_COST_AMOUNT) as net_adj_amt,
--F.TOT_NEG_SHRINK_AMT, F.TOT_POS_SHRINK_AMT, F.TOT_NEG_SHRINK_QTY, F.TOT_POS_SHRINK_QTY,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as net_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as net_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as net_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as net_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('02', '04', '05', '06', '17', '20', '29', '34', '36', '37', '51', '53', '54', '55', '60', '61', '62', '64', '65', '66', '68', '69', '70', 'NS', 'NP') ) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as unknown_shrink_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '03', '07', '08', '11', '21', '35', '50', '56', '57', '58', '63', '67') ) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as known_shrink_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('02', '04', '05', '06', '17', '20', '29', '34', '36', '37', '51', '53', '54', '55', '60', '61', '62', '64', '65', '66', '68', '69', '70', 'NS', 'NP') ) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as unknown_shrink_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '03', '07', '08', '11', '21', '35', '50', '56', '57', '58', '63', '67') ) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as known_shrink_amt,

sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code3_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code3_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code4_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code4_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code5_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code5_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code6_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code6_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code11_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code11_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code17_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code17_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code20_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code20_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code34_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code34_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code35_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code35_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code36_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code36_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code37_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code37_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code60_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code60_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code62_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code62_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code66_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code66_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code67_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code67_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code68_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code68_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code69_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code69_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code70_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code70_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as codeNP_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as codeNP_pos_adj_qty,


sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code3_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code3_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code4_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code4_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code5_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code5_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code6_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code6_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code11_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code11_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code17_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code17_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code20_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code20_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code34_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code34_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code35_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code35_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code36_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code36_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code37_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code37_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code60_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code60_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code62_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code62_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code66_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code66_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code67_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code67_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code68_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code68_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code69_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code69_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code70_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code70_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as codeNP_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as codeNP_pos_adj_amt


from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.PERIOD_END_DATE >= B.START_DATE
and A.PERIOD_END_DATE <= B.END_DATE
and A.STOCK_ADJUSTMENT_REASON_CODE IN ('00', '02', '03', '04', '05', '06', '07', '08', '11', '17', '20', '21', '29', '34', '35', '36', '37', '50', '51', '53', '54', '55', '56', '57', '58', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', 'NS', 'NP')
--and B.LAST_LAST_STK_DATE is NOT NULL
group by 1,2,3,4) SS_STK_ADJ
on A.LOCATION_GENERATED_IDENTIFIER = SS_STK_ADJ.LOCATION_GENERATED_IDENTIFIER
and A.PRODUCT_GENERATED_IDENTIFIER = SS_STK_ADJ.PRODUCT_GENERATED_IDENTIFIER
and A.START_DATE = SS_STK_ADJ.START_DATE

left join
(select A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.START_DATE, B.END_DATE, 
sum(A.WEEKLY_NET_SALES_QUANTITY) as net_sls_qty,
sum(A.WEEKLY_NET_SELL_AMOUNT) as net_sls_amt
from KSFPA.MR2C.WEEKLY_ADJUSTED_SALES A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE >= B.START_DATE
and A.WEEK_END_DATE <= B.END_DATE
--and B.LAST_LAST_STK_DATE is NOT NULL
group by 1,2,3,4) SALES
on A.LOCATION_GENERATED_IDENTIFIER = SALES.LOCATION_GENERATED_IDENTIFIER
and A.PRODUCT_GENERATED_IDENTIFIER = SALES.PRODUCT_GENERATED_IDENTIFIER
and A.START_DATE = SALES.START_DATE
where C.DEPARTMENT_DESCRIPTION not in ('GARDEN GREENS','MAGAZINES','REUSABLE BAGS','CARDS & WRAP','PHOTO CENTRE','GIFT CARDS & RCHRG');


-----------------------------------------------

select A.LOCATION_SOURCE_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
A.ADJ_START_DATE, A.START_DATE, A.START_DATE_ADJ_TYPE, 
A.ADJ_END_DATE, A.END_DATE, A.END_DATE_ADJ_TYPE,
A.TOT_SHRINK_QTY_ZERO_SLS, A.TOT_SHRINK_QTY,
A.TOT_SHRINK_AMT_ZERO_SLS, 
A.TOT_KNOWN_SHRINK_AMT,A.TOT_SHRINK_AMT,
A.TOT_SALES_QTY, A.TOT_SALES_AMT,
A.AVG_SALES_AMT,
(A.TOT_SHRINK_AMT/A.TOT_SALES_AMT) AS Shrink_Amt_Rate,
A.TOT_GAPSCAN_QTY, A.TOT_GAPSCAN_AMT,
A.AVG_GAPSCAN_QTY, A.AVG_GAPSCAN_AMT,
A.PROD_CNT_ZERO_SLS, A.PROD_CNT,
A.ONLINE_SHRINK_QTY, A.ONLINE_SHRINK_AMT,
A.HEAD_OFFICE_ADJ_QTY, A.HEAD_OFFICE_ADJ_AMT,
B.Refund_no_receipt_Tran, B.Refund_Tran,
B.TOTAL_REFUND_QTY, B.TOTAL_Refund_no_receipt_QTY,
B.Self_Checkout_Tran, B.Purchase_Tran,
B.Total_Tran, C.HOUSE_MANIFEST_QTY,
C.ALL_MANIFEST_QTY, D.NEG_SOH_QTY,
D.NEG_SOH_COST_AMT, D.NEG_SOH_PROD_CNT,
E.AVG_SOH_QTY, E.AVG_SOH_COST_AMT,
E.AVG_NEG_SOH_QTY, E.AVG_NEG_SOH_COST_AMT,
E.AVG_NEG_SOH_PROD_CNT, E.AVG_PROD_CNT,
B.Total_Tran/(((A.END_DATE-A.START_DATE)/7)+1) AS AVG_WEEKLY_TRAN,
H.GAPSCAN_PERCENT_WEEKS, H.AVG_GAPSCAN_PROD_CNT,
DIV0(B.Refund_Tran,B.Total_Tran) AS REFUND_TRAN_PERCENT,
DIV0(B.TOTAL_REFUND_QTY,A.TOT_SALES_QTY) AS REFUND_QTY_PERCENT,
DIV0(B.Refund_no_receipt_Tran,B.Refund_Tran) AS REFUND_NO_RECEIPT_PERCENT,
DIV0(B.TOTAL_Refund_no_receipt_QTY,B.TOTAL_REFUND_QTY) AS REFUND_NO_RECEIPT_QTY_PERCENT,
DIV0(B.Self_Checkout_Tran,B.Purchase_Tran) AS SELF_CHECKOUT_PERCENT,
DIV0(A.AVG_GAPSCAN_AMT,IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_GAPSCAN_AMT_PERCENT,
DIV0(A.AVG_GAPSCAN_QTY,IFNULL(E.AVG_SOH_QTY,0)) AS AVG_GAPSCAN_QTY_PERCENT,
DIV0(A.AVG_HEAD_OFFICE_ADJ_AMT,IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_HEAD_OFFICE_AMT_PERCENT,
DIV0(A.AVG_HEAD_OFFICE_ADJ_QTY,IFNULL(E.AVG_SOH_QTY,0)) AS AVG_HEAD_OFFICE_QTY_PERCENT,
DIV0(IFNULL(C.HOUSE_MANIFEST_QTY,0),IFNULL(C.ALL_MANIFEST_QTY,0)) AS HOUSE_MANIFEST_QTY_PERCENT,
--(D.NEG_SOH_QTY/E.AVG_SOH_QTY) AS NEG_SOH_QTY_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_QTY,0),IFNULL(E.AVG_SOH_QTY,0)) AS AVG_NEG_SOH_QTY_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_COST_AMT,0),IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_NEG_SOH_AMT_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_PROD_CNT,0),IFNULL(E.AVG_PROD_CNT,0)) AS AVG_NEG_SOH_PROD_CNT_PERCENT,
DIV0(A.TOT_KNOWN_SHRINK_AMT,A.TOT_SALES_AMT) AS KNOWN_SHRINK_AMT_PERCENT,
DIV0(A.ALL_SHRINK_WO_STK_AMT,A.TOT_SALES_AMT) AS ALL_SHRINK_WO_STK_AMT_PERCENT,
DIV0(A.COSMETIC_KNOWN_SHRINK,COSMETIC_NET_SLS) AS COSMETIC_KNOWN_SR_RATE,
DIV0(A.APPLIANCE_KNOWN_SHRINK,APPLIANCE_NET_SLS) AS APPLIANCE_KNOWN_SR_RATE,
DIV0(A.DOLL_KNOWN_SHRINK,DOLL_NET_SLS) AS DOLL_KNOWN_SR_RATE,
DIV0(A.TOY_KNOWN_SHRINK,TOY_NET_SLS) AS TOY_KNOWN_SR_RATE,
DIV0(A.FAMILY_TECH_KNOWN_SHRINK,FAMILY_TECH_NET_SLS) AS FAMILY_TECH_KNOWN_SR_RATE,
DIV0(A.COSMETIC_ALL_SHRINK,COSMETIC_NET_SLS) AS COSMETIC_ALL_SR_RATE,
DIV0(A.APPLIANCE_ALL_SHRINK,APPLIANCE_NET_SLS) AS APPLIANCE_ALL_SR_RATE,
DIV0(A.DOLL_ALL_SHRINK,DOLL_NET_SLS) AS DOLL_ALL_SR_RATE,
DIV0(A.TOY_ALL_SHRINK,TOY_NET_SLS) AS TOY_ALL_SR_RATE,
DIV0(A.FAMILY_TECH_ALL_SHRINK,FAMILY_TECH_NET_SLS) AS FAMILY_TECH_ALL_SR_RATE,
DIV0(IFNULL(F.DIF_ORDERS,0),IFNULL(F.ALL_ORDERS,0)) AS ONLINE_FIRST_DIF_PERCENT,
DIV0(IFNULL(G.DIST_TRNS_WITH_INTRVNS,0),IFNULL(G.TOTAL_TRNS,0)) AS SCO_INTERVENTION_PERCENT,
A.STOCKTAKE_SHRINK_PERCENT
from
(select A.LOCATION_SOURCE_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
A.ADJ_START_DATE, A.START_DATE, A.START_DATE_ADJ_TYPE, 
A.ADJ_END_DATE, A.END_DATE, A.END_DATE_ADJ_TYPE,
sum(A.TOT_SHRINK_QTY_ZERO_SLS) as TOT_SHRINK_QTY_ZERO_SLS,
sum(A.TOT_SHRINK_QTY) as TOT_SHRINK_QTY,
sum(A.TOT_SHRINK_AMT_ZERO_SLS) as TOT_SHRINK_AMT_ZERO_SLS,
sum(A.known_shrink_amt) as TOT_KNOWN_SHRINK_AMT,
sum(A.TOT_SHRINK_AMT) as TOT_SHRINK_AMT,
sum(A.ALL_SHRINK_WO_STK_AMT) as ALL_SHRINK_WO_STK_AMT,
sum(A.TOT_SALES_QTY) as TOT_SALES_QTY,
sum(A.TOT_SALES_AMT) as TOT_SALES_AMT,
sum(A.TOT_SALES_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_SALES_AMT,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS COSMETIC_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS APPLIANCE_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS DOLL_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS TOY_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS FAMILY_TECH_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS COSMETIC_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS APPLIANCE_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS DOLL_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS TOY_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS FAMILY_TECH_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.TOT_SALES_AMT ELSE 0 END) AS COSMETIC_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.TOT_SALES_AMT ELSE 0 END) AS APPLIANCE_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.TOT_SALES_AMT ELSE 0 END) AS DOLL_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.TOT_SALES_AMT ELSE 0 END) AS TOY_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.TOT_SALES_AMT ELSE 0 END) AS FAMILY_TECH_NET_SLS,
SUM(A.STK_SHRINK_AMT)/SUM(A.TOT_SHRINK_AMT) AS STOCKTAKE_SHRINK_PERCENT,
sum(A.TOT_GAPSCAN_QTY) as TOT_GAPSCAN_QTY,
sum(A.TOT_GAPSCAN_AMT) as TOT_GAPSCAN_AMT,
sum(A.TOT_GAPSCAN_QTY)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_GAPSCAN_QTY,
sum(A.TOT_GAPSCAN_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_GAPSCAN_AMT,
count(A.PRODUCT_SOURCE_IDENTIFIER_ZERO_SLS) as PROD_CNT_ZERO_SLS,
count(distinct A.PRODUCT_SOURCE_IDENTIFIER) as PROD_CNT,
sum(A.ONLINE_SHRINK_QTY) as ONLINE_SHRINK_QTY,
sum(A.ONLINE_SHRINK_AMT) as ONLINE_SHRINK_AMT,
sum(A.HEAD_OFFICE_ADJ_QTY) as HEAD_OFFICE_ADJ_QTY,
sum(A.HEAD_OFFICE_ADJ_AMT) as HEAD_OFFICE_ADJ_AMT,
sum(A.HEAD_OFFICE_ADJ_QTY)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_HEAD_OFFICE_ADJ_QTY,
sum(A.HEAD_OFFICE_ADJ_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_HEAD_OFFICE_ADJ_AMT
from
(select A.PRODUCT_SOURCE_IDENTIFIER, A.LOCATION_SOURCE_IDENTIFIER,
A.LOCATION_GENERATED_IDENTIFIER, A.DEPARTMENT_SOURCE_IDENTIFIER, A.ADJ_START_DATE, 
A.START_DATE, A.START_DATE_ADJ_TYPE, A.ADJ_END_DATE, A.END_DATE, A.END_DATE_ADJ_TYPE,
A.net_adj_qty as TOT_SHRINK_QTY, A.net_adj_amt as TOT_SHRINK_AMT,
A.net_sls_qty as TOT_SALES_QTY, A.net_sls_amt AS TOT_SALES_AMT, A.known_shrink_amt,
(A.net_adj_qty - (code4_neg_adj_qty+code4_pos_adj_qty+code6_neg_adj_qty+code6_pos_adj_qty+code17_neg_adj_qty+code17_pos_adj_qty)) as ALL_SHRINK_WO_STK_QTY,
(A.net_adj_amt - (code4_neg_adj_amt+code4_pos_adj_amt+code6_neg_adj_amt+code6_pos_adj_amt+code17_neg_adj_amt+code17_pos_adj_amt)) as ALL_SHRINK_WO_STK_AMT,
(code4_neg_adj_amt+code4_pos_adj_amt+code6_neg_adj_amt+code6_pos_adj_amt+code17_neg_adj_amt+code17_pos_adj_amt) AS STK_SHRINK_AMT,
(code20_neg_adj_qty+code20_pos_adj_qty+code62_neg_adj_qty+code62_pos_adj_qty) AS TOT_GAPSCAN_QTY,
(code20_neg_adj_amt+code20_pos_adj_amt+code62_neg_adj_amt+code62_pos_adj_amt) AS TOT_GAPSCAN_AMT,
(code37_neg_adj_qty+code37_pos_adj_qty+code66_neg_adj_qty+code66_pos_adj_qty+code67_neg_adj_qty+code67_pos_adj_qty+code68_neg_adj_qty+code68_pos_adj_qty+code69_neg_adj_qty+code69_pos_adj_qty+code70_neg_adj_qty+code70_pos_adj_qty) AS ONLINE_SHRINK_QTY,
(code37_neg_adj_amt+code37_pos_adj_amt+code66_neg_adj_amt+code66_pos_adj_amt+code67_neg_adj_amt+code67_pos_adj_amt+code68_neg_adj_amt+code68_pos_adj_amt+code69_neg_adj_amt+code69_pos_adj_amt+code70_neg_adj_amt+code70_pos_adj_amt) AS ONLINE_SHRINK_AMT,
(codeNP_neg_adj_qty+codeNP_pos_adj_qty) AS HEAD_OFFICE_ADJ_QTY,
(codeNP_neg_adj_amt+codeNP_pos_adj_amt) AS HEAD_OFFICE_ADJ_AMT,
case when A.NET_SLS_QTY<=0 then A.net_adj_qty else 0 end as TOT_SHRINK_QTY_ZERO_SLS,
case when A.NET_SLS_QTY<=0 then A.net_adj_amt else 0 end as TOT_SHRINK_AMT_ZERO_SLS,
case when A.NET_SLS_QTY<=0 then A.PRODUCT_SOURCE_IDENTIFIER end as PRODUCT_SOURCE_IDENTIFIER_ZERO_SLS 
from KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS A )A
group by 1,2,3,4,5,6,7,8) A

inner join 
(select A.M_Store, B.START_DATE, B.END_DATE,
count(distinct case when (C.M_PURCHASE_FROM_STORE = 0 and substr(C.D_PURCHASE, 1, 4) = '1900') then C.M_TRN_ID end) as Refund_no_receipt_Tran,
count(distinct case when (a.A_NETCASH+a.A_NETNCASH) < 0 then A.M_TRN_ID end) as Refund_Tran,
sum(ifnull(C.REFUND_UNITS,0)) as TOTAL_REFUND_QTY, 
sum(case when (C.M_PURCHASE_FROM_STORE = 0 and substr(C.D_PURCHASE, 1, 4) = '1900') then C.REFUND_UNITS else 0 end) as TOTAL_Refund_no_receipt_QTY,
count(distinct case when (a.M_REG_NUM >= 78 or a.M_REG_NUM in (37,38,39)) then A.M_TRN_ID end) as Self_Checkout_Tran,
count(distinct case when (a.A_NETCASH+a.A_NETNCASH) > 0 then A.M_TRN_ID end) as Purchase_Tran,
count(distinct A.M_TRN_ID) as Total_Tran
from KSFPA.IPS_SALES.TRN_HEADER as A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE B
on A.M_Store = B.LOCATION_SOURCE_IDENTIFIER
left join 
(select M_TRN_ID, M_STORE, D_TRN_DATE,
M_PURCHASE_FROM_STORE, D_PURCHASE, 
count(distinct M_KD) as UNIQUE_ITEMS_COUNT,
sum(Q_UNITS) AS REFUND_UNITS 
FROM KSFPA.IPS_SALES.TRN_REFUND
group by 1,2,3,4,5) C
on A.M_TRN_ID = C.M_TRN_ID
and A.M_STORE = C.M_STORE
and A.D_TRN_DATE = C.D_TRN_DATE
where A.D_TRN_DATE >= B.START_DATE
and A.D_TRN_DATE <= B.END_DATE
--and B.LAST_LAST_STK_DATE is NOT NULL
and IFNULL(a.f_voided,0) = 0
group by 1,2,3) B
on A.LOCATION_SOURCE_IDENTIFIER = B.M_STORE
and A.START_DATE = B.START_DATE

LEFT JOIN 
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE,
sum(case when A.WMS_MANIFEST_TYPE_CODE IN ('H') then A.DESPATCH_QUANTITY else 0 end) as HOUSE_MANIFEST_QTY,
sum(case when A.WMS_MANIFEST_TYPE_CODE IN ('S','H') then A.DESPATCH_QUANTITY else 0 end) as ALL_MANIFEST_QTY
from KSFPA.MR2.WMS_MANIFEST A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.DAY_DATE >= D.START_DATE
and A.DAY_DATE <= D.END_DATE
--and D.LAST_LAST_STK_DATE IS NOT NULL
group by 1,2,3,4) C
on A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_GENERATED_IDENTIFIER
and A.START_DATE = C.START_DATE

LEFT JOIN 
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE,
sum(A.STOCK_ON_HAND_QUANTITY) as NEG_SOH_QTY,
sum(A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) as NEG_SOH_COST_AMT,
count(distinct A.PRODUCT_GENERATED_IDENTIFIER) as NEG_SOH_PROD_CNT
from KSFPA.MR2C.WEEKLY_LOCATION_STOCK A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE = DATEADD(DAY,-7,D.END_DATE)
--and D.LAST_LAST_STK_DATE IS NOT NULL
and A.STOCK_ON_HAND_QUANTITY < 0
group by 1,2,3,4) D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
and A.START_DATE = D.START_DATE

LEFT JOIN 
(select A.LOCATION_GENERATED_IDENTIFIER, A.LOCATION_SOURCE_IDENTIFIER, 
A.START_DATE, A.END_DATE, 
avg(A.STOCK_ON_HAND_QUANTITY) as AVG_SOH_QTY,
avg(A.SOH_COST_AMT) as AVG_SOH_COST_AMT,
avg(A.NEG_SOH_QTY) as AVG_NEG_SOH_QTY,
avg(A.NEG_SOH_COST_AMT) as AVG_NEG_SOH_COST_AMT,
avg(A.TOT_PROD_CNT) as AVG_PROD_CNT, 
avg(A.TOT_NEG_SOH_PROD_CNT) as AVG_NEG_SOH_PROD_CNT
FROM 
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
A.WEEK_END_DATE, D.START_DATE, D.END_DATE, 
sum(A.STOCK_ON_HAND_QUANTITY) as STOCK_ON_HAND_QUANTITY,
sum(A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) as SOH_COST_AMT,
sum(case when A.STOCK_ON_HAND_QUANTITY < 0 then A.STOCK_ON_HAND_QUANTITY else 0 end) as NEG_SOH_QTY,
sum(case when A.STOCK_ON_HAND_QUANTITY < 0 then (A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) else 0 end) as NEG_SOH_COST_AMT,
count(distinct A.PRODUCT_GENERATED_IDENTIFIER) as TOT_PROD_CNT,
count(distinct (case when A.STOCK_ON_HAND_QUANTITY < 0 then A.PRODUCT_GENERATED_IDENTIFIER end)) as TOT_NEG_SOH_PROD_CNT
from KSFPA.MR2C.WEEKLY_LOCATION_STOCK A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE >= D.START_DATE
and A.WEEK_END_DATE <= D.END_DATE
--and A.STOCK_ON_HAND_QUANTITY < 0
group by 1,2,3,4,5) A
group by 1,2,3,4) E
on A.LOCATION_GENERATED_IDENTIFIER = E.LOCATION_GENERATED_IDENTIFIER
and A.START_DATE = E.START_DATE

LEFT JOIN
(SELECT LOC.LOCATION_CODE as LOCATION_SOURCE_IDENTIFIER, D.START_DATE, D.END_DATE, 
sum(DIF_ORDERS) as DIF_ORDERS,
sum(ALL_ORDERS) as ALL_ORDERS
FROM KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD.SHRINK_TACTICAL.AGG_SHRINK_ONLINE_DIF_PERCENTAGE DIF
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_LOCATION" LOC
ON  DIF.FK_LOCATION_ID=LOC.SK_LOCATION_ID
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_DATE" C
ON  DIF.FK_DATE_ID = C.SK_DATE_ID
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on LOC.LOCATION_CODE = D.LOCATION_SOURCE_IDENTIFIER
where C.CALENDAR_WEEK_END_DATE >= D.START_DATE
and C.CALENDAR_WEEK_END_DATE <= D.END_DATE
GROUP BY 1,2,3) F
on A.LOCATION_SOURCE_IDENTIFIER = F.LOCATION_SOURCE_IDENTIFIER
and A.START_DATE = F.START_DATE

LEFT JOIN
(SELECT LOC.LOCATION_CODE as LOCATION_SOURCE_IDENTIFIER, D.START_DATE, D.END_DATE,
sum(A_SCO.TOTAL_INTRVNS) as TOTAL_INTRVNS,
sum(A_SCO.DIST_TRNS_WITH_INTRVNS) as DIST_TRNS_WITH_INTRVNS,
sum(A_SCO.TOTAL_TRNS) as TOTAL_TRNS
FROM "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."SHRINK_TACTICAL"."AGG_SHRINK_SCO_INTERVENTIONS" A_SCO
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_DATE" C
ON  A_SCO.FK_DATE_ID = C.SK_DATE_ID
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_LOCATION" LOC
ON  A_SCO.FK_LOCATION_ID=LOC.SK_LOCATION_ID
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on LOC.LOCATION_CODE = D.LOCATION_SOURCE_IDENTIFIER
where C.CALENDAR_WEEK_END_DATE >= D.START_DATE
and C.CALENDAR_WEEK_END_DATE <= D.END_DATE
GROUP BY 1,2,3) G
on A.LOCATION_SOURCE_IDENTIFIER = G.LOCATION_SOURCE_IDENTIFIER
and A.START_DATE = G.START_DATE

LEFT JOIN
(select LOCATION_GENERATED_IDENTIFIER, 
LOCATION_SOURCE_IDENTIFIER, START_DATE, END_DATE,
COUNT(DISTINCT PERIOD_END_DATE)/(((END_DATE-START_DATE)/7)+1) AS GAPSCAN_PERCENT_WEEKS,
AVG(DISTINCT_PROD_CNT) AS AVG_GAPSCAN_PROD_CNT
from
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE, A.PERIOD_END_DATE,
COUNT(DISTINCT A.PRODUCT_GENERATED_IDENTIFIER) AS DISTINCT_PROD_CNT
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.ALL_STK_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_STK_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.PERIOD_END_DATE >= D.START_DATE
and A.PERIOD_END_DATE <= D.END_DATE
and A.STOCK_ADJUSTMENT_REASON_CODE IN ('20','62')
group by 1,2,3,4,5) A
group by 1,2,3,4) H
on A.LOCATION_GENERATED_IDENTIFIER = H.LOCATION_GENERATED_IDENTIFIER
and A.START_DATE = H.START_DATE;



-----------------------Creating data for future stock take stores------------------------------

DROP TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_PAST_STK_DATE;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_PAST_STK_DATE AS 
select A.LOCATION_GENERATED_IDENTIFIER,
A.LOCATION_SOURCE_IDENTIFIER,
IFNULL(A.LAST_LAST_STK_DATE, A.LAST_STK_START_DATE) AS ADJ_START_DATE,
A.LAST_STK_START_DATE AS START_DATE, A.LAST_STK_END_DATE AS END_DATE,
CASE WHEN A.LAST_LAST_STK_DATE IS NULL THEN 'FIRST_ADJ' ELSE 'STK_ADJ' END AS START_DATE_ADJ_TYPE
from KSFPA.LOSS_PREVENTION_PVT.STK_STRS_WITH_STK_DATE_VD A
where LAST_STK_DATE IS NOT NULL;

DROP TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE AS 
select A.LOCATION_GENERATED_IDENTIFIER,
A.LOCATION_SOURCE_IDENTIFIER,
IFNULL(B.STK_ADJ_DATE, C.FIRST_ADJ_DATE) AS ADJ_START_DATE,
CASE WHEN B.STK_ADJ_DATE IS NULL THEN C.FIRST_ADJ_DATE ELSE DATEADD(DAY,14,B.STK_ADJ_DATE) END AS START_DATE,
CASE WHEN B.STK_ADJ_DATE IS NULL THEN 'FIRST_ADJ' ELSE 'STK_ADJ' END AS START_DATE_ADJ_TYPE,
CURRENT_DATE()-DAYOFWEEK(CURRENT_DATE()) AS END_DATE
--CURRENT_DATE()-(DAYOFWEEK(CURRENT_DATE()-1)) AS END_DATE 
--from KSFPA.LOSS_PREVENTION_PVT.LATEST_STK_STORES_VD A
from KSFPA.LOSS_PREVENTION_PVT.ALL_STRS_PAST_STK_DATE A
LEFT JOIN
(select LOCATION_GENERATED_IDENTIFIER, 
max(PERIOD_END_DATE) as STK_ADJ_DATE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
INNER JOIN KSFPA.MR2C.KEYCODE B
ON A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
where STOCK_ADJUSTMENT_REASON_CODE IN ('04')
AND B.DEPARTMENT_DESCRIPTION NOT IN ('GARDEN GREENS','MAGAZINES','REUSABLE BAGS','CARDS & WRAP','PHOTO CENTRE','GIFT CARDS & RCHRG')
GROUP BY 1) B
ON A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
LEFT JOIN
(SELECT LOCATION_GENERATED_IDENTIFIER,
MIN(PERIOD_END_DATE) AS FIRST_ADJ_DATE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT
GROUP BY 1) C
ON A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_GENERATED_IDENTIFIER;


-----------------------Creating data for all future shrink pred stores------------------------------

DROP TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE AS 
select A.LOCATION_GENERATED_IDENTIFIER,
A.LOCATION_SOURCE_IDENTIFIER,
IFNULL(B.STK_ADJ_DATE, C.FIRST_ADJ_DATE) AS ADJ_START_DATE,
CASE WHEN B.STK_ADJ_DATE IS NULL THEN C.FIRST_ADJ_DATE ELSE DATEADD(DAY,14,B.STK_ADJ_DATE) END AS START_DATE,
CASE WHEN B.STK_ADJ_DATE IS NULL THEN 'FIRST_ADJ' ELSE 'STK_ADJ' END AS START_DATE_ADJ_TYPE,
DATEADD(DAY,-1,CURRENT_DATE()) AS END_DATE
from KSFPA.LOSS_PREVENTION_PVT.STK_STRS_WITH_STK_DATE_VD A
LEFT JOIN
(select LOCATION_GENERATED_IDENTIFIER, 
max(PERIOD_END_DATE) as STK_ADJ_DATE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
INNER JOIN KSFPA.MR2C.KEYCODE B
ON A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
where STOCK_ADJUSTMENT_REASON_CODE IN ('04')
AND B.DEPARTMENT_DESCRIPTION NOT IN ('GARDEN GREENS','MAGAZINES','REUSABLE BAGS','CARDS & WRAP','PHOTO CENTRE','GIFT CARDS & RCHRG')
GROUP BY 1) B
ON A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
LEFT JOIN
(SELECT LOCATION_GENERATED_IDENTIFIER, 
MIN(PERIOD_END_DATE) AS FIRST_ADJ_DATE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT
GROUP BY 1) C
ON A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_GENERATED_IDENTIFIER;



------------------------------------------------------------------------------------------------

DROP TABLE KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS;
CREATE TABLE KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS AS
SELECT A.PRODUCT_GENERATED_IDENTIFIER, C.PRODUCT_SOURCE_IDENTIFIER,
C.PRODUCT_DESCRIPTION, C.DEPARTMENT_SOURCE_IDENTIFIER, C.DEPARTMENT_DESCRIPTION, 
C.RBU_DESCRIPTION, C.BRAND_DESCRIPTION, C.HOUSEBRAND_NAME, 
C.BRAND_LABEL_DESCRIPTION, kc_flexi.BRAND_LABEL_TYPE,
kc_flexi.BRAND_LABEL, C.PREFERRED_SUPPLIER_NAME, 
C.LOCAL_OVERSEAS_INDICATOR, A.LOCATION_GENERATED_IDENTIFIER, 
B.LOCATION_SOURCE_IDENTIFIER, B.LOCATION_NAME, 
B.LOCATION_TYPE_CODE, B.DC_GROUP_ABBREV_NAME,
B.STATE,
A.ADJ_START_DATE, A.START_DATE, 
A.START_DATE_ADJ_TYPE, A.END_DATE,
SS_STK_ADJ.net_adj_qty, SS_STK_ADJ.net_adj_amt,
SALES.net_sls_qty, SALES.net_sls_amt,
SS_STK_ADJ.net_neg_adj_qty, SS_STK_ADJ.net_pos_adj_qty,
SS_STK_ADJ.net_neg_adj_amt, SS_STK_ADJ.net_pos_adj_amt,
SS_STK_ADJ.unknown_shrink_qty, SS_STK_ADJ.known_shrink_qty,
SS_STK_ADJ.unknown_shrink_amt, SS_STK_ADJ.known_shrink_amt,

SS_STK_ADJ.code3_neg_adj_qty, SS_STK_ADJ.code4_neg_adj_qty, SS_STK_ADJ.code5_neg_adj_qty, 
SS_STK_ADJ.code6_neg_adj_qty, SS_STK_ADJ.code11_neg_adj_qty, SS_STK_ADJ.code17_neg_adj_qty, 
SS_STK_ADJ.code20_neg_adj_qty, SS_STK_ADJ.code34_neg_adj_qty, SS_STK_ADJ.code35_neg_adj_qty, 
SS_STK_ADJ.code36_neg_adj_qty, SS_STK_ADJ.code37_neg_adj_qty, SS_STK_ADJ.code60_neg_adj_qty,
SS_STK_ADJ.code62_neg_adj_qty, SS_STK_ADJ.code66_neg_adj_qty, SS_STK_ADJ.code67_neg_adj_qty,
SS_STK_ADJ.code68_neg_adj_qty, SS_STK_ADJ.code69_neg_adj_qty, SS_STK_ADJ.code70_neg_adj_qty, 
SS_STK_ADJ.codeNP_neg_adj_qty,
SS_STK_ADJ.code3_pos_adj_qty, SS_STK_ADJ.code4_pos_adj_qty, SS_STK_ADJ.code5_pos_adj_qty, 
SS_STK_ADJ.code6_pos_adj_qty, SS_STK_ADJ.code11_pos_adj_qty, SS_STK_ADJ.code17_pos_adj_qty, 
SS_STK_ADJ.code20_pos_adj_qty, SS_STK_ADJ.code34_pos_adj_qty, SS_STK_ADJ.code35_pos_adj_qty, 
SS_STK_ADJ.code36_pos_adj_qty, SS_STK_ADJ.code37_pos_adj_qty, SS_STK_ADJ.code60_pos_adj_qty,
SS_STK_ADJ.code62_pos_adj_qty, SS_STK_ADJ.code66_pos_adj_qty, SS_STK_ADJ.code67_pos_adj_qty,
SS_STK_ADJ.code68_pos_adj_qty, SS_STK_ADJ.code69_pos_adj_qty, SS_STK_ADJ.code70_pos_adj_qty, 
SS_STK_ADJ.codeNP_pos_adj_qty,

SS_STK_ADJ.code3_neg_adj_amt, SS_STK_ADJ.code4_neg_adj_amt, SS_STK_ADJ.code5_neg_adj_amt, 
SS_STK_ADJ.code6_neg_adj_amt, SS_STK_ADJ.code11_neg_adj_amt, SS_STK_ADJ.code17_neg_adj_amt, 
SS_STK_ADJ.code20_neg_adj_amt, SS_STK_ADJ.code34_neg_adj_amt, SS_STK_ADJ.code35_neg_adj_amt, 
SS_STK_ADJ.code36_neg_adj_amt, SS_STK_ADJ.code37_neg_adj_amt, SS_STK_ADJ.code60_neg_adj_amt,
SS_STK_ADJ.code62_neg_adj_amt, SS_STK_ADJ.code66_neg_adj_amt, SS_STK_ADJ.code67_neg_adj_amt,
SS_STK_ADJ.code68_neg_adj_amt, SS_STK_ADJ.code69_neg_adj_amt, SS_STK_ADJ.code70_neg_adj_amt, 
SS_STK_ADJ.codeNP_neg_adj_amt,
SS_STK_ADJ.code3_pos_adj_amt, SS_STK_ADJ.code4_pos_adj_amt, SS_STK_ADJ.code5_pos_adj_amt, 
SS_STK_ADJ.code6_pos_adj_amt, SS_STK_ADJ.code11_pos_adj_amt, SS_STK_ADJ.code17_pos_adj_amt, 
SS_STK_ADJ.code20_pos_adj_amt, SS_STK_ADJ.code34_pos_adj_amt, SS_STK_ADJ.code35_pos_adj_amt, 
SS_STK_ADJ.code36_pos_adj_amt, SS_STK_ADJ.code37_pos_adj_amt, SS_STK_ADJ.code60_pos_adj_amt,
SS_STK_ADJ.code62_pos_adj_amt, SS_STK_ADJ.code66_pos_adj_amt, SS_STK_ADJ.code67_pos_adj_amt,
SS_STK_ADJ.code68_pos_adj_amt, SS_STK_ADJ.code69_pos_adj_amt, SS_STK_ADJ.code70_pos_adj_amt, 
SS_STK_ADJ.codeNP_pos_adj_amt


from
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER,
ADJ_START_DATE, START_DATE, 
START_DATE_ADJ_TYPE, END_DATE
from
(select distinct A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.ADJ_START_DATE, B.START_DATE, 
B.START_DATE_ADJ_TYPE, B.END_DATE
from KSFPA.MR2C.WEEKLY_ADJUSTED_SALES A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where B.START_DATE_ADJ_TYPE IN ('STK_ADJ')
--A.WEEK_END_DATE >= B.START_DATE
--and A.WEEK_END_DATE <= '2020-11-29'
and A.WEEKLY_NET_SELL_AMOUNT != 0) 
UNION 
(select distinct A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.ADJ_START_DATE, B.START_DATE, 
B.START_DATE_ADJ_TYPE, B.END_DATE
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where B.START_DATE_ADJ_TYPE IN ('STK_ADJ')
--A.WEEK_END_DATE >= B.START_DATE
--and A.WEEK_END_DATE <= '2020-11-29'
and A.STOCK_ADJUSTMENT_COST_AMOUNT != 0
and A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '02', '03', '04', '05', '06', '07', '08', '11', '17', '20', '21', '29', '34', '35', '36', '37', '50', '51', '53', '54', '55', '56', '57', '58', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', 'NS', 'NP')) ) A

inner join KSFPA.MR2C.LOCATION B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER

inner join KSFPA.MR2C.KEYCODE as C
on A.PRODUCT_GENERATED_IDENTIFIER = C.PRODUCT_GENERATED_IDENTIFIER

left join KSFPA.MR2C.KEYCODE_FLEXIBLE_ATTRIBUTE as kc_flexi
on A.PRODUCT_GENERATED_IDENTIFIER = kc_flexi.PRODUCT_GENERATED_IDENTIFIER

left join
(select A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.START_DATE, B.END_DATE,
sum(A.STOCK_ADJUSTMENT_QUANTITY) as net_adj_qty,
sum(A.STOCK_ADJUSTMENT_COST_AMOUNT) as net_adj_amt,
--F.TOT_NEG_SHRINK_AMT, F.TOT_POS_SHRINK_AMT, F.TOT_NEG_SHRINK_QTY, F.TOT_POS_SHRINK_QTY,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as net_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as net_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as net_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as net_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('02', '04', '05', '06', '17', '20', '29', '34', '36', '37', '51', '53', '54', '55', '60', '61', '62', '64', '65', '66', '68', '69', '70', 'NS', 'NP') ) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as unknown_shrink_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '03', '07', '08', '11', '21', '35', '50', '56', '57', '58', '63', '67') ) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as known_shrink_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('02', '04', '05', '06', '17', '20', '29', '34', '36', '37', '51', '53', '54', '55', '60', '61', '62', '64', '65', '66', '68', '69', '70', 'NS', 'NP') ) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as unknown_shrink_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '03', '07', '08', '11', '21', '35', '50', '56', '57', '58', '63', '67') ) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as known_shrink_amt,

sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code3_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code3_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code4_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code4_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code5_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code5_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code6_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code6_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code11_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code11_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code17_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code17_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code20_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code20_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code34_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code34_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code35_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code35_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code36_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code36_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code37_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code37_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code60_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code60_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code62_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code62_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code66_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code66_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code67_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code67_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code68_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code68_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code69_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code69_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code70_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as code70_pos_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as codeNP_neg_adj_qty,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_QUANTITY else 0 end) as codeNP_pos_adj_qty,


sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code3_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('03') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code3_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code4_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('04') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code4_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code5_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('05') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code5_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code6_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('06') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code6_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code11_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('11') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code11_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code17_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('17') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code17_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code20_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('20') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code20_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code34_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('34') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code34_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code35_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('35') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code35_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code36_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('36') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code36_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code37_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('37') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code37_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code60_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('60') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code60_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code62_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('62') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code62_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code66_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('66') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code66_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code67_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('67') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code67_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code68_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('68') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code68_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code69_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('69') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code69_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code70_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('70') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as code70_pos_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY < 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as codeNP_neg_adj_amt,
sum(case when (A.STOCK_ADJUSTMENT_REASON_CODE in ('NP') and A.STOCK_ADJUSTMENT_QUANTITY > 0) then A.STOCK_ADJUSTMENT_COST_AMOUNT else 0 end) as codeNP_pos_adj_amt


from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.PERIOD_END_DATE >= B.START_DATE
and A.PERIOD_END_DATE <= B.END_DATE
and B.START_DATE_ADJ_TYPE IN ('STK_ADJ')
and A.STOCK_ADJUSTMENT_REASON_CODE in ('00', '02', '03', '04', '05', '06', '07', '08', '11', '17', '20', '21', '29', '34', '35', '36', '37', '50', '51', '53', '54', '55', '56', '57', '58', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', 'NS', 'NP')
group by 1,2,3,4) SS_STK_ADJ
on A.LOCATION_GENERATED_IDENTIFIER = SS_STK_ADJ.LOCATION_GENERATED_IDENTIFIER
and A.PRODUCT_GENERATED_IDENTIFIER = SS_STK_ADJ.PRODUCT_GENERATED_IDENTIFIER

left join
(select A.PRODUCT_GENERATED_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
B.START_DATE, B.END_DATE, 
sum(A.WEEKLY_NET_SALES_QUANTITY) as net_sls_qty,
sum(A.WEEKLY_NET_SELL_AMOUNT) as net_sls_amt
from KSFPA.MR2C.WEEKLY_ADJUSTED_SALES A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE B
on A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE >= B.START_DATE
and A.WEEK_END_DATE <= B.END_DATE
and B.START_DATE_ADJ_TYPE IN ('STK_ADJ')
group by 1,2,3,4) SALES
on A.LOCATION_GENERATED_IDENTIFIER = SALES.LOCATION_GENERATED_IDENTIFIER
and A.PRODUCT_GENERATED_IDENTIFIER = SALES.PRODUCT_GENERATED_IDENTIFIER
where C.DEPARTMENT_DESCRIPTION not in ('GARDEN GREENS','MAGAZINES','REUSABLE BAGS','CARDS & WRAP','PHOTO CENTRE','GIFT CARDS & RCHRG');




-----------------------------------------------

select A.LOCATION_SOURCE_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER,
A.STATE, A.START_DATE, A.END_DATE, 
A.ADJ_START_DATE, A.START_DATE_ADJ_TYPE,
A.TOT_SHRINK_QTY_ZERO_SLS, A.TOT_SHRINK_QTY,
A.TOT_SHRINK_AMT_ZERO_SLS, 
A.TOT_KNOWN_SHRINK_AMT, A.TOT_SHRINK_AMT,
A.TOT_SALES_QTY, A.TOT_SALES_AMT,
A.AVG_SALES_AMT,
(A.TOT_SHRINK_AMT/A.TOT_SALES_AMT) AS Shrink_Amt_Rate,
A.TOT_GAPSCAN_QTY, A.TOT_GAPSCAN_AMT,
A.AVG_GAPSCAN_QTY, A.AVG_GAPSCAN_AMT,
A.PROD_CNT_ZERO_SLS, A.PROD_CNT,
A.ONLINE_SHRINK_QTY, A.ONLINE_SHRINK_AMT,
A.HEAD_OFFICE_ADJ_QTY, A.HEAD_OFFICE_ADJ_AMT,
B.Refund_no_receipt_Tran, B.Refund_Tran,
B.TOTAL_REFUND_QTY, B.TOTAL_Refund_no_receipt_QTY,
B.Self_Checkout_Tran, B.Purchase_Tran,
B.Total_Tran, C.HOUSE_MANIFEST_QTY,
C.ALL_MANIFEST_QTY, D.NEG_SOH_QTY,
D.NEG_SOH_COST_AMT, D.NEG_SOH_PROD_CNT,
E.AVG_SOH_QTY, E.AVG_SOH_COST_AMT,
E.AVG_NEG_SOH_QTY, E.AVG_NEG_SOH_COST_AMT,
E.AVG_NEG_SOH_PROD_CNT, E.AVG_PROD_CNT,
--B.Total_Tran/(((DATEADD(DAY,-1,A.END_DATE)-A.START_DATE)/7)+1) AS AVG_WEEKLY_TRAN,
B.Total_Tran/(((A.END_DATE-A.START_DATE)/7)+1) AS AVG_WEEKLY_TRAN,
H.GAPSCAN_PERCENT_WEEKS, H.AVG_GAPSCAN_PROD_CNT,
DIV0(B.Refund_Tran,B.Total_Tran) AS REFUND_TRAN_PERCENT,
DIV0(B.TOTAL_REFUND_QTY,A.TOT_SALES_QTY) AS REFUND_QTY_PERCENT,
DIV0(B.Refund_no_receipt_Tran,B.Refund_Tran) AS REFUND_NO_RECEIPT_PERCENT,
DIV0(B.TOTAL_Refund_no_receipt_QTY,B.TOTAL_REFUND_QTY) AS REFUND_NO_RECEIPT_QTY_PERCENT,
DIV0(B.Self_Checkout_Tran,B.Purchase_Tran) AS SELF_CHECKOUT_PERCENT,
DIV0(A.AVG_GAPSCAN_AMT,IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_GAPSCAN_AMT_PERCENT,
DIV0(A.AVG_GAPSCAN_QTY,IFNULL(E.AVG_SOH_QTY,0)) AS AVG_GAPSCAN_QTY_PERCENT,
DIV0(A.AVG_HEAD_OFFICE_ADJ_AMT,IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_HEAD_OFFICE_AMT_PERCENT,
DIV0(A.AVG_HEAD_OFFICE_ADJ_QTY,IFNULL(E.AVG_SOH_QTY,0)) AS AVG_HEAD_OFFICE_QTY_PERCENT,
DIV0(IFNULL(C.HOUSE_MANIFEST_QTY,0),IFNULL(C.ALL_MANIFEST_QTY,0)) AS HOUSE_MANIFEST_QTY_PERCENT,
--(D.NEG_SOH_QTY/E.AVG_SOH_QTY) AS NEG_SOH_QTY_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_QTY,0),IFNULL(E.AVG_SOH_QTY,0)) AS AVG_NEG_SOH_QTY_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_COST_AMT,0),IFNULL(E.AVG_SOH_COST_AMT,0)) AS AVG_NEG_SOH_AMT_PERCENT,
DIV0(IFNULL(E.AVG_NEG_SOH_PROD_CNT,0),IFNULL(E.AVG_PROD_CNT,0)) AS AVG_NEG_SOH_PROD_CNT_PERCENT,
DIV0(A.TOT_KNOWN_SHRINK_AMT,A.TOT_SALES_AMT) AS KNOWN_SHRINK_AMT_PERCENT,
DIV0(A.ALL_SHRINK_WO_STK_AMT,A.TOT_SALES_AMT) AS ALL_SHRINK_WO_STK_AMT_PERCENT,
DIV0(A.COSMETIC_KNOWN_SHRINK,COSMETIC_NET_SLS) AS COSMETIC_KNOWN_SR_RATE,
DIV0(A.APPLIANCE_KNOWN_SHRINK,APPLIANCE_NET_SLS) AS APPLIANCE_KNOWN_SR_RATE,
DIV0(A.DOLL_KNOWN_SHRINK,DOLL_NET_SLS) AS DOLL_KNOWN_SR_RATE,
DIV0(A.TOY_KNOWN_SHRINK,TOY_NET_SLS) AS TOY_KNOWN_SR_RATE,
DIV0(A.FAMILY_TECH_KNOWN_SHRINK,FAMILY_TECH_NET_SLS) AS FAMILY_TECH_KNOWN_SR_RATE,
DIV0(A.COSMETIC_ALL_SHRINK,COSMETIC_NET_SLS) AS COSMETIC_ALL_SR_RATE,
DIV0(A.APPLIANCE_ALL_SHRINK,APPLIANCE_NET_SLS) AS APPLIANCE_ALL_SR_RATE,
DIV0(A.DOLL_ALL_SHRINK,DOLL_NET_SLS) AS DOLL_ALL_SR_RATE,
DIV0(A.TOY_ALL_SHRINK,TOY_NET_SLS) AS TOY_ALL_SR_RATE,
DIV0(A.FAMILY_TECH_ALL_SHRINK,FAMILY_TECH_NET_SLS) AS FAMILY_TECH_ALL_SR_RATE,
DIV0(IFNULL(F.DIF_ORDERS,0),IFNULL(F.ALL_ORDERS,0)) AS ONLINE_FIRST_DIF_PERCENT,
DIV0(IFNULL(G.DIST_TRNS_WITH_INTRVNS,0),IFNULL(G.TOTAL_TRNS,0)) AS SCO_INTERVENTION_PERCENT,
A.STOCKTAKE_SHRINK_PERCENT
from
(select A.LOCATION_SOURCE_IDENTIFIER, A.LOCATION_GENERATED_IDENTIFIER, A.STATE,
A.ADJ_START_DATE, A.START_DATE, 
A.START_DATE_ADJ_TYPE, A.END_DATE,
sum(A.TOT_SHRINK_QTY_ZERO_SLS) as TOT_SHRINK_QTY_ZERO_SLS,
sum(A.TOT_SHRINK_QTY) as TOT_SHRINK_QTY,
sum(A.TOT_SHRINK_AMT_ZERO_SLS) as TOT_SHRINK_AMT_ZERO_SLS,
sum(A.known_shrink_amt) as TOT_KNOWN_SHRINK_AMT,
sum(A.ALL_SHRINK_WO_STK_AMT) as ALL_SHRINK_WO_STK_AMT,
sum(A.TOT_SHRINK_AMT) as TOT_SHRINK_AMT,
sum(A.TOT_SALES_QTY) as TOT_SALES_QTY,
sum(A.TOT_SALES_AMT) as TOT_SALES_AMT,
sum(A.TOT_SALES_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_SALES_AMT,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS COSMETIC_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS APPLIANCE_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS DOLL_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS TOY_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.KNOWN_SHRINK_AMT ELSE 0 END) AS FAMILY_TECH_KNOWN_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS COSMETIC_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS APPLIANCE_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS DOLL_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS TOY_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.ALL_SHRINK_WO_STK_AMT ELSE 0 END) AS FAMILY_TECH_ALL_SHRINK,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 20 THEN A.TOT_SALES_AMT ELSE 0 END) AS COSMETIC_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 56 THEN A.TOT_SALES_AMT ELSE 0 END) AS APPLIANCE_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 67 THEN A.TOT_SALES_AMT ELSE 0 END) AS DOLL_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 47 THEN A.TOT_SALES_AMT ELSE 0 END) AS TOY_NET_SLS,
SUM(CASE WHEN A.DEPARTMENT_SOURCE_IDENTIFIER = 75 THEN A.TOT_SALES_AMT ELSE 0 END) AS FAMILY_TECH_NET_SLS,
SUM(A.STK_SHRINK_AMT)/SUM(A.TOT_SHRINK_AMT) AS STOCKTAKE_SHRINK_PERCENT,
sum(A.TOT_GAPSCAN_QTY) as TOT_GAPSCAN_QTY,
sum(A.TOT_GAPSCAN_AMT) as TOT_GAPSCAN_AMT,
sum(A.TOT_GAPSCAN_QTY)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_GAPSCAN_QTY,
sum(A.TOT_GAPSCAN_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_GAPSCAN_AMT,
count(A.PRODUCT_SOURCE_IDENTIFIER_ZERO_SLS) as PROD_CNT_ZERO_SLS,
count(distinct A.PRODUCT_SOURCE_IDENTIFIER) as PROD_CNT,
sum(A.ONLINE_SHRINK_QTY) as ONLINE_SHRINK_QTY,
sum(A.ONLINE_SHRINK_AMT) as ONLINE_SHRINK_AMT,
sum(A.HEAD_OFFICE_ADJ_QTY) as HEAD_OFFICE_ADJ_QTY,
sum(A.HEAD_OFFICE_ADJ_AMT) as HEAD_OFFICE_ADJ_AMT,
sum(A.HEAD_OFFICE_ADJ_QTY)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_HEAD_OFFICE_ADJ_QTY,
sum(A.HEAD_OFFICE_ADJ_AMT)/(((A.END_DATE-A.START_DATE)/7)+1) as AVG_HEAD_OFFICE_ADJ_AMT
from
(select A.PRODUCT_SOURCE_IDENTIFIER, A.LOCATION_SOURCE_IDENTIFIER, A.STATE,
A.LOCATION_GENERATED_IDENTIFIER, A.DEPARTMENT_SOURCE_IDENTIFIER, A.ADJ_START_DATE, 
A.START_DATE, A.START_DATE_ADJ_TYPE, A.END_DATE,
A.net_adj_qty as TOT_SHRINK_QTY, A.net_adj_amt as TOT_SHRINK_AMT,
A.net_sls_qty as TOT_SALES_QTY, A.net_sls_amt AS TOT_SALES_AMT, A.known_shrink_amt,
(A.net_adj_qty - (code4_neg_adj_qty+code4_pos_adj_qty+code6_neg_adj_qty+code6_pos_adj_qty+code17_neg_adj_qty+code17_pos_adj_qty)) as ALL_SHRINK_WO_STK_QTY,
(A.net_adj_amt - (code4_neg_adj_amt+code4_pos_adj_amt+code6_neg_adj_amt+code6_pos_adj_amt+code17_neg_adj_amt+code17_pos_adj_amt)) as ALL_SHRINK_WO_STK_AMT,
(code4_neg_adj_amt+code4_pos_adj_amt+code6_neg_adj_amt+code6_pos_adj_amt+code17_neg_adj_amt+code17_pos_adj_amt) AS STK_SHRINK_AMT,
(code20_neg_adj_qty+code20_pos_adj_qty+code62_neg_adj_qty+code62_pos_adj_qty) AS TOT_GAPSCAN_QTY,
(code20_neg_adj_amt+code20_pos_adj_amt+code62_neg_adj_amt+code62_pos_adj_amt) AS TOT_GAPSCAN_AMT,
(code37_neg_adj_qty+code37_pos_adj_qty+code66_neg_adj_qty+code66_pos_adj_qty+code67_neg_adj_qty+code67_pos_adj_qty+code68_neg_adj_qty+code68_pos_adj_qty+code69_neg_adj_qty+code69_pos_adj_qty+code70_neg_adj_qty+code70_pos_adj_qty) AS ONLINE_SHRINK_QTY,
(code37_neg_adj_amt+code37_pos_adj_amt+code66_neg_adj_amt+code66_pos_adj_amt+code67_neg_adj_amt+code67_pos_adj_amt+code68_neg_adj_amt+code68_pos_adj_amt+code69_neg_adj_amt+code69_pos_adj_amt+code70_neg_adj_amt+code70_pos_adj_amt) AS ONLINE_SHRINK_AMT,
(codeNP_neg_adj_qty+codeNP_pos_adj_qty) AS HEAD_OFFICE_ADJ_QTY,
(codeNP_neg_adj_amt+codeNP_pos_adj_amt) AS HEAD_OFFICE_ADJ_AMT,
case when A.NET_SLS_QTY<=0 then A.net_adj_qty else 0 end as TOT_SHRINK_QTY_ZERO_SLS,
case when A.NET_SLS_QTY<=0 then A.net_adj_amt else 0 end as TOT_SHRINK_AMT_ZERO_SLS,
case when A.NET_SLS_QTY<=0 then A.PRODUCT_SOURCE_IDENTIFIER end as PRODUCT_SOURCE_IDENTIFIER_ZERO_SLS  
from KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS A) A
group by 1,2,3,4,5,6,7) A

inner join 
(select A.M_Store, B.START_DATE, B.END_DATE,
count(distinct case when (C.M_PURCHASE_FROM_STORE = 0 and substr(C.D_PURCHASE, 1, 4) = '1900') then C.M_TRN_ID end) as Refund_no_receipt_Tran,
count(distinct case when (a.A_NETCASH+a.A_NETNCASH) < 0 then A.M_TRN_ID end) as Refund_Tran,
sum(ifnull(C.REFUND_UNITS,0)) as TOTAL_REFUND_QTY, 
sum(case when (C.M_PURCHASE_FROM_STORE = 0 and substr(C.D_PURCHASE, 1, 4) = '1900') then C.REFUND_UNITS else 0 end) as TOTAL_Refund_no_receipt_QTY,
count(distinct case when (a.M_REG_NUM >= 78 or a.M_REG_NUM in (37,38,39)) then A.M_TRN_ID end) as Self_Checkout_Tran,
count(distinct case when (a.A_NETCASH+a.A_NETNCASH) > 0 then A.M_TRN_ID end) as Purchase_Tran,
count(distinct A.M_TRN_ID) as Total_Tran
from KSFPA.IPS_SALES.TRN_HEADER as A
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE B
on A.M_Store = B.LOCATION_SOURCE_IDENTIFIER
left join 
(select M_TRN_ID, M_STORE, D_TRN_DATE,
M_PURCHASE_FROM_STORE, D_PURCHASE, 
count(distinct M_KD) as UNIQUE_ITEMS_COUNT,
sum(Q_UNITS) AS REFUND_UNITS 
FROM KSFPA.IPS_SALES.TRN_REFUND
group by 1,2,3,4,5) C
on A.M_TRN_ID = C.M_TRN_ID
and A.M_STORE = C.M_STORE
and A.D_TRN_DATE = C.D_TRN_DATE
where A.D_TRN_DATE >= B.START_DATE
and A.D_TRN_DATE <= B.END_DATE
and B.START_DATE_ADJ_TYPE IN ('STK_ADJ')
and IFNULL(a.f_voided,0) = 0
group by 1,2,3) B
on A.LOCATION_SOURCE_IDENTIFIER = B.M_STORE

LEFT JOIN 
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE,
sum(case when A.WMS_MANIFEST_TYPE_CODE IN ('H') then A.DESPATCH_QUANTITY else 0 end) as HOUSE_MANIFEST_QTY,
sum(case when A.WMS_MANIFEST_TYPE_CODE IN ('S','H') then A.DESPATCH_QUANTITY else 0 end) as ALL_MANIFEST_QTY
from KSFPA.MR2.WMS_MANIFEST A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.DAY_DATE >= D.START_DATE
and A.DAY_DATE <= D.END_DATE
and D.START_DATE_ADJ_TYPE IN ('STK_ADJ')
group by 1,2,3,4) C
on A.LOCATION_GENERATED_IDENTIFIER = C.LOCATION_GENERATED_IDENTIFIER

LEFT JOIN
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE,
sum(A.STOCK_ON_HAND_QUANTITY) as NEG_SOH_QTY,
sum(A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) as NEG_SOH_COST_AMT,
count(distinct A.PRODUCT_GENERATED_IDENTIFIER) as NEG_SOH_PROD_CNT
from KSFPA.MR2C.WEEKLY_LOCATION_STOCK A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
--where A.WEEK_END_DATE = DATEADD(DAY,-1,D.END_DATE)
where A.WEEK_END_DATE = D.END_DATE
and D.START_DATE_ADJ_TYPE IN ('STK_ADJ')
and A.STOCK_ON_HAND_QUANTITY < 0
group by 1,2,3,4) D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER

LEFT JOIN 
(select A.LOCATION_GENERATED_IDENTIFIER, A.LOCATION_SOURCE_IDENTIFIER, 
A.START_DATE, A.END_DATE,
avg(A.STOCK_ON_HAND_QUANTITY) as AVG_SOH_QTY,
avg(A.SOH_COST_AMT) as AVG_SOH_COST_AMT,
avg(A.NEG_SOH_QTY) as AVG_NEG_SOH_QTY,
avg(A.NEG_SOH_COST_AMT) as AVG_NEG_SOH_COST_AMT,
avg(A.TOT_PROD_CNT) as AVG_PROD_CNT, 
avg(A.TOT_NEG_SOH_PROD_CNT) as AVG_NEG_SOH_PROD_CNT
FROM 
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
A.WEEK_END_DATE, D.START_DATE, D.END_DATE, 
sum(A.STOCK_ON_HAND_QUANTITY) as STOCK_ON_HAND_QUANTITY,
sum(A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) as SOH_COST_AMT,
sum(case when A.STOCK_ON_HAND_QUANTITY < 0 then A.STOCK_ON_HAND_QUANTITY else 0 end) as NEG_SOH_QTY,
sum(case when A.STOCK_ON_HAND_QUANTITY < 0 then (A.STOCK_ON_HAND_SELL_AMOUNT-A.STOCK_ON_HAND_MARGIN_AMOUNT) else 0 end) as NEG_SOH_COST_AMT,
count(distinct A.PRODUCT_GENERATED_IDENTIFIER) as TOT_PROD_CNT,
count(distinct (case when A.STOCK_ON_HAND_QUANTITY < 0 then A.PRODUCT_GENERATED_IDENTIFIER end)) as TOT_NEG_SOH_PROD_CNT
from KSFPA.MR2C.WEEKLY_LOCATION_STOCK A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.WEEK_END_DATE >= D.START_DATE
and A.WEEK_END_DATE <= D.END_DATE
and D.START_DATE_ADJ_TYPE IN ('STK_ADJ')
group by 1,2,3,4,5) A
group by 1,2,3,4) E
on A.LOCATION_GENERATED_IDENTIFIER = E.LOCATION_GENERATED_IDENTIFIER

LEFT JOIN 
(SELECT LOC.LOCATION_CODE as LOCATION_SOURCE_IDENTIFIER, D.START_DATE, D.END_DATE, 
sum(DIF_ORDERS) as DIF_ORDERS,
sum(ALL_ORDERS) as ALL_ORDERS
FROM KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD.SHRINK_TACTICAL.AGG_SHRINK_ONLINE_DIF_PERCENTAGE DIF
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_LOCATION" LOC
ON  DIF.FK_LOCATION_ID=LOC.SK_LOCATION_ID
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_DATE" C
ON  DIF.FK_DATE_ID = C.SK_DATE_ID
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on LOC.LOCATION_CODE = D.LOCATION_SOURCE_IDENTIFIER
where C.CALENDAR_WEEK_END_DATE >= D.START_DATE
and C.CALENDAR_WEEK_END_DATE <= D.END_DATE
GROUP BY 1,2,3) F
on A.LOCATION_SOURCE_IDENTIFIER = F.LOCATION_SOURCE_IDENTIFIER

LEFT JOIN
(SELECT LOC.LOCATION_CODE as LOCATION_SOURCE_IDENTIFIER, D.START_DATE, D.END_DATE,
sum(A_SCO.TOTAL_INTRVNS) as TOTAL_INTRVNS,
sum(A_SCO.DIST_TRNS_WITH_INTRVNS) as DIST_TRNS_WITH_INTRVNS,
sum(A_SCO.TOTAL_TRNS) as TOTAL_TRNS
FROM "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."SHRINK_TACTICAL"."AGG_SHRINK_SCO_INTERVENTIONS" A_SCO
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_DATE" C
ON  A_SCO.FK_DATE_ID = C.SK_DATE_ID
INNER JOIN "KSF_SOPHIA_DATA_INTELLIGENCE_HUB_PROD"."COMMON_DIMENSIONS"."DIM_LOCATION" LOC
ON  A_SCO.FK_LOCATION_ID=LOC.SK_LOCATION_ID
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on LOC.LOCATION_CODE = D.LOCATION_SOURCE_IDENTIFIER
where C.CALENDAR_WEEK_END_DATE >= D.START_DATE
and C.CALENDAR_WEEK_END_DATE <= D.END_DATE
GROUP BY 1,2,3) G
on A.LOCATION_SOURCE_IDENTIFIER = G.LOCATION_SOURCE_IDENTIFIER

LEFT JOIN
(select LOCATION_GENERATED_IDENTIFIER, 
LOCATION_SOURCE_IDENTIFIER, START_DATE, END_DATE,
COUNT(DISTINCT PERIOD_END_DATE)/(((A.END_DATE-A.START_DATE)/7)+1) AS GAPSCAN_PERCENT_WEEKS,
AVG(DISTINCT_PROD_CNT) AS AVG_GAPSCAN_PROD_CNT
from
(select A.LOCATION_GENERATED_IDENTIFIER, D.LOCATION_SOURCE_IDENTIFIER, 
D.START_DATE, D.END_DATE, A.PERIOD_END_DATE,
COUNT(DISTINCT A.PRODUCT_GENERATED_IDENTIFIER) AS DISTINCT_PROD_CNT
from KSFPA.MR2.SS_STOCK_ADJUSTMENT A
inner join
(select distinct PRODUCT_GENERATED_IDENTIFIER, LOCATION_GENERATED_IDENTIFIER
from KSFPA.LOSS_PREVENTION_PVT.FUTURE_STK_TEST_PROD_LOC_SHRINK_SLS) B
on A.PRODUCT_GENERATED_IDENTIFIER = B.PRODUCT_GENERATED_IDENTIFIER
and A.LOCATION_GENERATED_IDENTIFIER = B.LOCATION_GENERATED_IDENTIFIER
inner join KSFPA.LOSS_PREVENTION_PVT.ALL_FUTURE_STK_STRS_DATE D
on A.LOCATION_GENERATED_IDENTIFIER = D.LOCATION_GENERATED_IDENTIFIER
where A.PERIOD_END_DATE >= D.START_DATE
and A.PERIOD_END_DATE <= D.END_DATE
and D.START_DATE_ADJ_TYPE IN ('STK_ADJ')
and A.STOCK_ADJUSTMENT_REASON_CODE IN ('20','62')
group by 1,2,3,4,5) A
group by 1,2,3,4) H
on A.LOCATION_GENERATED_IDENTIFIER = H.LOCATION_GENERATED_IDENTIFIER;
